class NodeType(object):
    PROGRAM, STATEMENT, CONST_DEF, EXPRESSION, CONST_ASSIGNMENT, VAR_DECL, IDENTIFIER_LIST, COLON, HEADING, \
    SEQUENCE, ASSIGNMENT, RELATION_EQUAl, RELATION_NON_EQUAL, RELATION_LESS, RELATION_LESS_EQUAL, RELATION_GREATER, \
    RELATION_GREATER_EQUAL, OPERATOR_UNARY_PLUS, OPERATOR_UNARY_MINUS, OPERATOR_PLUS, OPERATOR_MINUS, OPERATOR_OR, \
    OPERATOR_MULTIPLY, OPERATOR_DIVISION, OPERATOR_DIV, OPERATOR_MOD, OPERATOR_AND, IF, WHILE, OPERATOR_NOT, \
    COMPOSED = range(31)

    _type_names = ["PROGRAM", "STATEMENT", "CONST_DEF", "EXPRESSION", "CONST_ASSIGNMENT", "VAR_DECL", "IDENTIFIER_LIST",
                  "COLON",
                  "HEADING", "SEQUENCE", "ASSIGNMENT", "RELATION_EQUAl", "RELATION_NON_EQUAL", "RELATION_LESS",
                  "RELATION_LESS_EQUAL",
                  "RELATION_GREATER", "RELATION_GREATER_EQUAL", "OPERATOR_UNARY_PLUS", "OPERATOR_UNARY_MINUS",
                  "OPERATOR_PLUS",
                  "OPERATOR_MINUS", "OPERATOR_OR", "OPERATOR_MULTIPLY", "OPERATOR_DIVISION", "OPERATOR_DIV",
                  "OPERATOR_MOD", "OPERATOR_AND",
                  "IF", "WHILE", "OPERATOR_NOT", "COMPOSED"]

    @classmethod
    def get_type_name(cls, tree_node):
        return cls._type_names[tree_node.node_type]
